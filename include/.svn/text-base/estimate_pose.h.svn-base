/***************************************************************************
 *   Copyright (C) 2010 by Markus Bader               *
 *   markus.bader@tuwien.ac.at                                             *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include <ros/ros.h>
#include <sensor_msgs/image_encodings.h>
#include <image_transport/image_transport.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <cv_bridge/CvBridge.h>
#include <image_geometry/pinhole_camera_model.h>
#include <tf/transform_broadcaster.h>
#include <visualization_msgs/Marker.h>

#include <pose_msgs/GetPose.h>


#include <v4r/checkerboard/checkerboard.h>
#include <v4r/geometry/pose.h>
#include <ros/time.h>


#include <boost/concept_check.hpp>


class PoseDetector : public V4R::Checkerboard
{
    static const int BOARD = 1;
    static const int CAMERA = 2;
    ros::NodeHandle mNoteHandle;

    image_transport::ImageTransport mImageTransport;
    ros::Publisher mMarker_pub;
    tf::TransformBroadcaster mTF_broadcaster;
    image_transport::CameraSubscriber mCameraSubscriber;
    image_geometry::PinholeCameraModel mCamModel;
    ros::ServiceServer mService;

    std::string mImageTopic;
    std::string mBase_frame;
    std::string mFrame_id;
    std::string mMarkerNS;
    std::string mPoseFile;
    bool mValidPose;
    V4R::PoseD mPose;
    ros::Time mTime;
    std::string mWindowName;
    bool mPublishTFLink;
    bool mPublishRVizMarker;
    bool mReadPoseFromFile;
    bool mDrawDebugImage;
    cv::Size_<int> mCheckerboard;
    cv::Size_<double> mCheckerboardBox;
    int mPose2Compute;
    bool mPublishLastSuccess;
    int mSkipCount;
    int mFrameCount;
    bool mSuccessfulDetection;

public:
    PoseDetector ( ros::NodeHandle nh, std::string image_topic, bool publish_tf_link = true,  bool publish_rviz_marker = true, bool read_pose_file = false, bool drawDebugImage = true );
    ~PoseDetector() ;

    const std::string windowName() ;
    void subscribe() ;
    void initCheckerboard ( cv::Size_<int> checkerboard, cv::Size_<double> checkerboardbox, bool use_sub_pixel, bool publish_last_success = false ) ;
    void initLinks ( std::string base_frame, std::string frame_id ) ;
    void initMarkerNS ( std::string markerNS ) ;
    void initPoseFile ( std::string posefile ) ;
    void initSkipCount ( int skip_frames ) ;
    bool compute_pose (pose_msgs::GetPose::Request &req, pose_msgs::GetPose::Response &resp) ;
    void initService ( std::string service_name ) ;
    void computeCameraPose() ;
    void publishMarker() ;
    void publishTf() ;
    void imageDummyCallback ( const sensor_msgs::ImageConstPtr& image_msg,   const sensor_msgs::CameraInfoConstPtr& info_msg ) ;
    void imageCallback ( const sensor_msgs::ImageConstPtr& image_msg, const sensor_msgs::CameraInfoConstPtr& info_msg ) ;
};
